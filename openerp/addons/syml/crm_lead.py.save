import urllib2
import string
import random
import binascii

import subprocess
import netsvc
import base64
from osv import fields,osv
import datetime
from datetime import timedelta
from datetime import date
import time
from base_status.base_stage import base_stage
import tools
from tools.translate import _
from tools import html2plaintext

from xml.dom.minidom import parse, parseString
import imp

import xml.etree.ElementTree as ET
from xml.etree.ElementTree import Element
import string
ADDONS_PATH = tools.config['addons_path'].split(",")[-1]
import os
import stat
from xml.dom import minidom
from tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT, DATETIME_FORMATS_MAP, float_compare
import dateutil.relativedelta
#from geolocate import GeoLocation
#gl = GeoLocation()

#from elementtree.ElementTree import XML, SubElement, Element, tostring
#import xml.etree.ElementTree as ET
#import sys

class crm_lead(osv.osv):
    _name = "crm.lead"
    _inherit = ['mail.thread', 'ir.needaction_mixin','crm.lead']
    _columns={
#        'priority': fields.selection(crm.AVAILABLE_PRIORITIES, 'Priority', select=True, track_visibility='onchange'),
        'email_from': fields.char('Email(Personal)', size=128, help="Email address of the contact", select=1),
        'email_work': fields.char('Email(work)', size=128, help="Email address of the contact"),        
        'mobile': fields.char('Cell', size=64),
        'work_phone': fields.char('Work', size=24),
        'phone': fields.char("Home", size=64),
        'preferred_number':fields.selection([('cell','Cell'),('home','Home'),('work','Work')],'Preferred Number',track_visibility='onchange'),
        'isUpdatedToUA':fields.boolean('IsupdatedToUA'),
        'application_no':fields.char('Application No',size=20, readonly=True),
        'web_response':fields.char('more web response',size=24),
#        'section_id': fields.many2one('crm.case.section', 'Sales Team', \
#                        select=True, help='When sending mails, the default email address is taken from the sales team.', invisible=True,),
        'lead_source': fields.selection([('corporate', 'Corporate'), ('referral', 'Referral'),
                                   ('prospecting', 'Prospecting'),('renewal', 'Renewal'),('website', 'Website'),('personal_market', 'Personal Market')], 'Lead Source', track_visibility='onchange'),
        'referral_source' : fields.many2one('res.partner','Referral Source', track_visibility='onchange'),
        'realtor' : fields.many2one('hr.applicant','Realtor', track_visibility='onchange'),
        'trainee' : fields.many2one('res.users','Training Associate Referral', track_visibility='onchange'),
#        'sales_asso' : fields.many2one('res.users','Sales Associate'),
#        'opp_info': fields.selection([('loan_amnt', 'Loan Ammount'), ('rate', 'Interest Rate'),
#                                   ('amortization', 'Amortization'),('sdate', 'Start Date'),('renewd', 'Renewal Date'),('type', 'type')], 'Opportunity Information'),   
        'opp_info_type':fields.selection([('Pre-Approval','Pre-Approval'),('Purchase','Purchase'),('Renewal','Renewal')],'Lead Type', track_visibility='onchange'),
        'opp_info_rate':fields.integer('Interest Rate',track_visibility='always'),
        'opp_info_loan_amnt':fields.integer('Current Mortgage Amount',track_visibility='always'),
        'existing_lender':fields.char('Existing Lender', size=240, track_visibility='always'),
        'opp_info_renewal_date':fields.date('Renewal Date', track_visibility='always'),
        'estimated_valueof_home':fields.char('Estimated Value of Home',size=120, track_visibility='always'),
        'desired_mortgage_amount':fields.char('Desired Mortgage Amount',size=120, track_visibility='always'),

        'Amortization':fields.char('Amortization',size=128),
        'opp_info_start_date':fields.date('Start Date'),        
        'term_rate':fields.selection([('term', 'Term'),],'Term Rate'),   
        'op_info_type':fields.selection([('p_approve', 'Pre_Approval'),('mortagage', 'Mortagage Roval'),],'Op Info Type'),   
        'credit_story': fields.text('Credit Story',track_visibility='onchange'),
#        'pen_app':fields.selection([('broker', 'Broker Reset Button'),('instruction', ' New Instruction'),],''),        
        'trigger': fields.selection([('save', 'Save to application stage'), ('create', 'create application'),
                                       ('send', 'send thank you email w/ application self server link'),('create_con', 'create contact')], 'Trigger'),   
        'existing_mortgage': fields.char('Existing Mortgage',size=124, track_visibility='always'),
        'future_mortgage': fields.char('Future Mortgage',size=124, track_visibility='always'),
        'marketing_auto': fields.char('Marketing Automation',size=124,track_visibility='always'),
        'approached_check':fields.boolean('approached'),
        'qualified_check':fields.boolean('qualified'),
        'process_presntedutio_check':fields.boolean('process_presnted'),
        'concerns_addressed_check':fields.boolean('concerns_addressed'),
        'pending_application_check':fields.boolean('pending_application'),
        'spouse': fields.char('Spouse', size=128),
#        'reporting_manager':fields.many2one('res.users','Reporting Manager'),
        'all_email_ids':fields.char('Webform User Name',size=128),
        'webform_uname':fields.char('Webform User Name',size=128),
        'webform_pwd':fields.char('Webform Password',size=128),
	'from_web_form':fields.char('From Web Form', size=240, track_visibility='always'),
        'lawyer':fields.many2one('res.partner','Lawyer'),
        #'broker_team':fields.many2one('hr.department','Team'),
        'referral_fee':fields.float('Referral Fee', digits=(16,2 )),
        "hr_department_id": fields.many2one("hr.department", 'Team'),
        'prod_count':fields.integer('Product Count'),
        'template_date':fields.datetime('Date'),
        'deadline':fields.datetime('Paperwork Deadline'),
        'dup_task_created':fields.boolean('Dupl Task Created'),
        'new_opp_users':fields.char('New Opportunity Users',size=128),
        'congrats_date':fields.datetime('Client Greeting Date'),
        'greeting_send':fields.boolean('Greeting Send'),
        'client_survey':fields.datetime('Client Survey Reminder'), #date to track to send client servey mail after 72 hours from congrats mail has been send
        'client_remd':fields.boolean('Client Reminder'), # boolean field to track that client has done the survey.
        'client_email_rem':fields.boolean('Client Email Reminder'), ##boolean field that client had not done the survey and mail has been send to them.
        'renewal_mail_date':fields.date('Renewal Mail Date',),
        'date_renewed':fields.boolean('Date Renewed'),
        
    }
    _defaults = {
        'preferred_number': 'cell',
    }
    _order = "create_date desc"

    def _reporting_manager(self, cr, uid, *args):
        
        user_obj = self.pool.get('res.users')
        hr_employee_obj = self.pool.get('hr.employee')
        
        employee_ids = hr_employee_obj.search(cr, uid, [('user_id','=',uid)])
        print "employee_ids======",employee_ids
        if employee_ids:
            emp_obj = hr_employee_obj.browse(cr, uid, employee_ids[0])
            report_mng_user_id = emp_obj.parent_id and emp_obj.parent_id.user_id.id or False
            print "report managers",report_mng_user_id 
            if report_mng_user_id:
                return report_mng_user_id
            else:
                return 1
        else:
            return 1
    
    def _renewal_date(self, cr, uid, *args):
#        date = datetime.date.today()+ timedelta(days=20)
        date = datetime.date.today()
        return date.strftime('%Y-%m-%d')
    
    _defaults = {
                'user_id': lambda obj, cr, uid, context: uid,
                'opp_info_start_date': datetime.date.today().strftime('%Y-%m-%d'),
                'opp_info_renewal_date':_renewal_date,
                'preferred_number':'cell'
#                'reporting_manager': _reporting_manager,
        }

    def on_change_partner(self, cr, uid, ids, partner_id, context=None):
        result = {}
        values = {}
        if partner_id:
            partner = self.pool.get('res.partner').browse(cr, uid, partner_id, context=context)            
            values = {
                'email_from' : partner.email,
                'email_work' : partner.email_personal,
                'phone' : partner.phone,
                'mobile' : partner.mobile,
                'work_phone':partner.work_phone,
                'fax' : partner.fax, 
                'spouse':partner.spouse,
                'preferred_number' : partner.preferred_phone
            }
        return {'value' : values}


    def create(self, cr, uid, values, context=None):
        opp_info_renewal,stage_name,stage_id,delayed_app_date='','','',''
        ids_hr_employee = self.pool.get('hr.employee').search(cr,uid, [('user_id', '=', uid)])
        dep_id=self.pool.get('hr.employee').browse(cr,uid,ids_hr_employee[0]).department_id.id
        cur_date_time=datetime.datetime.now()
        delayed_app_date=cur_date_time+datetime.timedelta(days=1)

	cr.execute("select count(id) from product_product")
        prod_count = cr.fetchone()[0]
        print "prod_count----------------",prod_count
        values['date_renewed']=int(prod_count)

#        datetime.date.today() + datetime.timedelta(6*365/12)).isoformat()
        if values.get('opp_info_renewal_date',False):
#            renewal_mail_date = values.get('opp_info_renewal_date') - datetime.timedelta(month=8)
            opp_info_renewal=datetime.datetime.strptime(values.get('opp_info_renewal_date',False), "%Y-%m-%d")
            renewal_mail_date = opp_info_renewal - dateutil.relativedelta.relativedelta(months=8)
            
            values['renewal_mail_date']=renewal_mail_date
            values['date_renewed']=False

        
        stage_id=values.get('stage_id',False)
        if stage_id:
            stage_name=self.pool.get('crm.case.stage').browse(cr,uid,stage_id).name
        if values.get('stage_id') and stage_name=='Partial App':
            values['delayed_app_date']=delayed_app_date
            values['lead_followup_date']=delayed_app_date

        
        all_email_ids=""
        if values.get('app_rec_ids'):
#            print "vals.get('app_rec_ids')===========",vals.get('app_rec_ids')
            new_rec_ids=values.get('app_rec_ids')[0][2]
            if new_rec_ids:
                applicant_obj=self.pool.get('applicant.record')

                for each in new_rec_ids:
                    mail_id=""
                    mail_id=applicant_obj.browse(cr,uid,each).email_personal+","
                    if mail_id not in all_email_ids:
                        all_email_ids+=mail_id
                
                all_email_ids=all_email_ids[:-1]
            values['all_email_ids']=all_email_ids

        
        app_lst=[]
        if values.get('app_rec_ids'):
            app_lst=values.get('app_rec_ids')[0][2]
        if values.get('what_is_your_lending_goal') and app_lst:

            

            app_objs=self.pool.get('applicant.record').browse(cr,uid,app_lst[0])
            if values.get('what_is_your_lending_goal') == '1':

                sub_name=app_objs.applicant_name + " " + app_objs.applicant_last_name+ " - " +(values.get('considered_cites') or "NA" )+ ", " +(values.get('application_date') or 'NA')
                values['name']=sub_name
            elif values.get('what_is_your_lending_goal') == "2" or values.get('what_is_your_lending_goal') == "3":
                sub_name=app_objs.applicant_name + " " + app_objs.applicant_last_name+" - "+(values.get('address') or "NA")+ ", " +(values.get('city') or "NA")+ ", " +(values.get('charge_on_title') or "NA")+ ", " +(values.get('application_date') or "NA")
                values['name']=sub_name


        deadline=( datetime.datetime.now() + datetime.timedelta(days=3)).strftime('%Y-%m-%d %H:%M:%S')
        if values.get('closing_date',False):
            congrats_date=( values.get('closing_date',False) + datetime.timedelta(hours=72)).strftime('%Y-%m-%d %H:%M:%S')
            values.update({'congrats_date':congrats_date})
        if dep_id:
#            values.update({'hr_department_id':dep_id[0]})
            values.update({'hr_department_id':dep_id})
        values.update({'deadline':deadline})

        
        usr_id =super(crm_lead, self).create(cr, uid, values, context=context)

        return usr_id

    def onchange_contact(self, cr, uid, ids, partner_id): 
        if partner_id:
            obj_res_partner = self.pool.get('res.partner').browse(cr,uid,partner_id)
            val = {'Spouse': obj_res_partner.Spouse or '',
                    'email_from':obj_res_partner.email or '',
                    'email_work':obj_res_partner.email_personal or '',
                    'mobile':obj_res_partner.mobile or '',
                    'work_phone':obj_res_partner.work_phone or '',
                    'phone':obj_res_partner.phone or '',
                    'preferred_number':obj_res_partner.preferred_phone or '',
                    'fax':obj_res_partner.fax or ''
                }
            return {'value': val}
        else:
            return 1
    
    def sendmail(self,cr,uid,ids,template_title,res_id,context=None):
        if context==None:
            context={}
        email_template_obj = self.pool.get('email.template')        

        crm_browse = self.browse(cr,uid,ids[0])
        context.update({'crm_id':crm_browse})
        print "ids===",ids
        print"context",context
        # Random create pwd
        uname = pwd = ''
        if crm_browse.webform_uname and crm_browse.webform_pwd:
            uname = crm_browse.webform_uname
            pwd = crm_browse.webform_pwd
        else:
            name = crm_browse.partner_id.name 
            #uname = name.replace(" ", "")
            uname = ''.join(e for e in name if e.isalnum())
            #pwd = ''.join(random.choice(string.ascii_lowercase) for x in range(6))
            pwd = binascii.b2a_hex(os.urandom(3))

        print "uname===",uname
        print "pwd===",pwd

        # Create Joomla Record

        #req = urllib2.Request('http://107.23.130.227/visdom/Visdomlive/tmp/generaterecord.php?view=mortgageapplication&id=%s&username=%s&password=%s'%(ids[0],uname,pwd))
       # req = urllib2.Request('https://198.72.106.11/visdom/tmp/generaterecord.php?view=mortgageapplication&id=%s&username=%s&password=%s'%(ids[0],uname,pwd))
	req = urllib2.Request('https://webserv.visdom.ca/tmp/generaterecord.php?view=mortgageapplication&id=%s&username=%s&password=%s'%(ids[0],uname,pwd))
#        req = urllib2.Request('http://192.168.1.89/visdom/tmp/generaterecord.php?view=mortgageapplication&id=%s&username=%s&password=%s'%(ids[0],uname,pwd))
	print "*****************req**********************",req
        urllib2.urlopen(req)

        self.write(cr,uid,ids,{'webform_uname':uname,'webform_pwd':pwd})

#        cr.execute('SELECT id FROM email_template WHERE "name" ilike %s',('%'+template_title+'%',) )
#        cr.commit()
#        template_details = cr.dictfetchall()
#        if not template_details:
#            raise osv.except_osv(('Template Not Found'),('The selected template "'+template_title+'" is not configured'))
#        template_id = template_details[0]['id']
#        print "email_from===============",template_id.id.email_from
#        print "email_to====",template_id.email_to
        context.update({'lead_id':ids[0],'user_id':uid})
#        message_id = email_template_obj.send_mail(cr, uid, template_title, res_id, force_send=True, context=context)
#        print "=======================message sent successfully=========================="
        return True
#        cr.execute('SELECT state FROM mail_message WHERE id = %s',(message_id,) )
#        cr.commit()
#        message_details = cr.dictfetchall()
#        message_state = message_details[0]['state']
#        if message_state == "exception": 
#            raise osv.except_osv(('Missing SMTP Server'),('Please define at least one SMTP server, or provide the SMTP parameters explicitly')) 
#        else:
#            return True

    def send_email_awaiting(self,cr,uid,ids,context=None):
        ir_model_data = self.pool.get('ir.model.data')
#        template_id = ir_model_data.get_object_reference(cr, uid, 'syml', 'email_template_related_docs')[1]
        compose_form_id = ir_model_data.get_object_reference(cr, uid, 'mail', 'email_compose_message_wizard_form')[1]
        print"compose_form_id",compose_form_id
        ctx = dict(context)
        print"ctx",ctx
        ctx.update({
            'default_model': 'crm.lead',
            'default_res_id': ids[0],
            'default_type': '',
            
            'default_composition_mode': 'comment',
            'crm_id':''


            #'mark_so_as_sent': True
        })
	print"ctx",ctx
        return {
        'type': 'ir.actions.act_window',
        'view_type': 'form',
        'view_mode': 'form',
        'res_model': 'mail.compose.message',
        'views': [(compose_form_id, 'form')],
        'view_id': compose_form_id,
        'target': 'new',
        'context': ctx,
         'nodestroy': True,
        }

    
    def write(self, cr, uid, ids, vals, context=None):
        if context==None:
            context={}
        if not isinstance(ids,list):
           ids = [ids]
        stage_name,opp_info_renewal,stage_id,assig_to,user,user_id,delayed_app_date='','','',uid,'',uid,''
        project_task = self.pool.get('project.task')
        mod_obj = self.pool.get('ir.model.data')
        res_users_obj=self.pool.get('res.users')
        
        crm_browse = self.browse(cr,uid,ids[0])
        
        context.update({'crm_id':crm_browse})
        stage_id=vals.get('stage_id',False)

	cr.execute("select count(id) from product_product")
        prod_count = cr.fetchone()[0]
        print "prod_count--------write--------",prod_count
        vals['prod_count']=prod_count

        if stage_id:
            stage_name=self.pool.get('crm.case.stage').browse(cr,uid,stage_id).name
        delayed_app_date=crm_browse.delayed_app_date
        lead_followup_date=crm_browse.lead_followup_date

        if vals.get('opp_info_renewal_date',False):
            opp_info_renewal=datetime.datetime.strptime(values.get('opp_info_renewal_date',False), "%Y-%m-%d")
            renewal_mail_date = opp_info_renewal - dateutil.relativedelta.relativedelta(months=8)
            vals['renewal_mail_date']=renewal_mail_date
            vals['date_renewed']=False
        cur_date_time=datetime.datetime.now()
        delayed_app_date=cur_date_time+datetime.timedelta(days=1)

        if vals.get('stage_id',False) and stage_name=='Partial App':
            if delayed_app_date==False:
                vals['delayed_app_date']=delayed_app_date
            if lead_followup_date==False:
                vals['lead_followup_date']=delayed_app_date
        app_brow_ids=self.browse(cr,uid,ids[0]).app_rec_ids

#        what_is_your_lending_goal,considered_cites=''
        what_is_your_lending_goal=crm_browse.what_is_your_lending_goal
        if what_is_your_lending_goal and app_brow_ids:
            considered_cites,application_date,charge_on_title,address,city='','','','',''
            if app_brow_ids:
                app_objs=app_brow_ids[0]
#            if vals.has_key('what_is_your_lending_goal'):
            
    #        else:
    #            what_is_your_lending_goal=self.browse(cr,uid,ids[0]).what_is_your_lending_goal

            if vals.has_key('considered_cites'):
                considered_cites=vals.get('considered_cites')
            else:
                considered_cites=self.browse(cr,uid,ids[0]).considered_cites

            if vals.has_key('application_date'):
                application_date=vals.get('application_date')
            else:
                application_date=self.browse(cr,uid,ids[0]).application_date

            if vals.has_key('address'):
                address=vals.get('address')
            else:
                address=self.browse(cr,uid,ids[0]).address

            if vals.has_key('city'):
                city=vals.get('city')
            else:
                city=self.browse(cr,uid,ids[0]).city

            if vals.has_key('charge_on_title'):
                charge_on_title=vals.get('charge_on_title')
	
            else:
                charge_on_title=self.browse(cr,uid,ids[0]).charge_on_title
	    print"charge on titleeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",charge_on_title
	    if charge_on_title:
                if charge_on_title=='1':
                    charge_on_title='First'
                elif charge_on_title=='2':
                    charge_on_title='Second'
                elif charge_on_title=='3':
                    charge_on_title='Third'
                elif charge_on_title=='4':
                    charge_on_title='Fourth'
                elif charge_on_title=='5':
                    charge_on_title='Bridge'
                else:

                    charge_on_title=''
	        print"charge_on_titlecharge_on_title",charge_on_title	
            if what_is_your_lending_goal and app_brow_ids:
                if what_is_your_lending_goal == '1':
                    sub_name=app_objs.applicant_name + " " + app_objs.applicant_last_name+ " - " +(considered_cites or "NA" )+ ", " +(application_date or 'NA')
                    vals['name']=sub_name
                elif what_is_your_lending_goal == "2" or what_is_your_lending_goal == "3":
                    sub_name=app_objs.applicant_name + " " + app_objs.applicant_last_name+" - "+(address or "NA")+ ", " +(city or "NA")+ ", " +(charge_on_title or "NA")+ ", " +(application_date or "NA")
                    vals['name']=sub_name
             
        all_email_ids=""
        if vals.get('app_rec_ids'):
            new_rec_ids=vals.get('app_rec_ids')[0][2]
            if new_rec_ids:
                applicant_obj=self.pool.get('applicant.record')

                for each in new_rec_ids:
                    mail_id=""
                    mail_id=applicant_obj.browse(cr,uid,each).email_personal+","
                    if mail_id not in all_email_ids:
                        all_email_ids+=mail_id
                all_email_ids=all_email_ids[:-1]
            vals['all_email_ids']=all_email_ids
        
        
        app_record_obj=self.pool.get('applicant.record')
        app_name=''
        emails_cc=''
        if crm_browse.app_rec_ids:
            for each_appl in crm_browse.app_rec_ids[1:]:
                emails_cc += each_appl.email_personal + ","

        if vals.has_key('stage_id') and vals['stage_id']:
            stage_brw=self.pool.get('crm.case.stage').browse(cr,uid,vals['stage_id'])
            print"stage_brw",stage_brw.name
#            if stage_brw.name=='Pending Application':
#                mod_obj = self.pool.get('ir.model.data')
#                template = mod_obj.get_object_reference(cr, uid, 'syml', 'email_template_relator_referal_received')
#                template_id = template and template[1] or False
#                if template_id:
#                    self.pool.get('email.template').send_mail(cr,uid,template_id,ids[0],'True',context)
#            print"crm_browse.state",crm_browse.state
            if stage_brw.name=='Task':
                self.verify_product(cr,uid,ids,context)
            if stage_brw.name=='All Product':
                self.all_products(cr,uid,ids,context)
            if stage_brw.name=='Post Selection':
                self.post_selection(cr,uid,ids,context)
            if stage_brw.name=='Expired' or stage_brw.name=='Lost':
                mod_obj = self.pool.get('ir.model.data')
                template = mod_obj.get_object_reference(cr, uid, 'syml', 'email_template_relator_expired_referal')
                template_id = template and template[1] or False
#                if template_id:
#                    self.pool.get('email.template').send_mail(cr,uid,template_id,ids[0],'True',context)
            if stage_brw.name=='Paid':
                datas=[]
                ir_attachment = self.pool.get('ir.attachment')
                mod_obj = self.pool.get('ir.model.data')
                template = mod_obj.get_object_reference(cr, uid, 'syml', 'email_template_paid_refferal_message')
                template_id = template and template[1] or False
#                if template_id:
#                    self.pool.get('email.template').send_mail(cr,uid,template_id,ids[0],'True',context)

#                template2 = mod_obj.get_object_reference(cr, uid, 'syml', 'email_template_paid_refferal_relator')
#                template_id2 = template2 and template2[1] or False
#                if template_id2:
#                    self.pool.get('email.template').send_mail(cr,uid,template_id2,ids[0],'True',context)
               
#                datas = {
#                         'model': 'crm.lead',
#                         'ids': ids,
#                         'form': self.read(cr, uid, ids[0], context=context),
#                }
                attach_data= {'type': 'ir.actions.report.xml',
                'report_name': 'appl.snap3',
                'datas': datas, 'nodestroy': True}
                ir_attachment = self.pool.get('ir.attachment')
                service = netsvc.LocalService('report.appl.snap3')
                (result, format) = service.create(cr, uid,ids, attach_data, context)
                ir_attachment.create(cr, uid, {
                'name': 'Applicant Snapshot',
                'datas': base64.b64encode(result),
                'datas_fname': 'Applicant Snapshot',
                'res_model': 'crm.lead',
                'res_id': ids[0],
                'type':'binary'}, context)
                
                
            if stage_brw.name == 'Credit':
                app_ids=crm_browse.app_rec_ids
                if app_ids:
                    for each in app_ids:
                        app_record_obj.send_to_equifax(cr,uid,[each.id],context)
                    time.sleep(10)
                    for each in app_ids:
                        app_record_obj.fetch_equifax_response(cr,uid,[each.id],context)
            if stage_brw.name == 'Proposal':
                user=crm_browse.hr_department_id.id
                if user:
                    user_id=user
                assig_to_ids=''
                context.update({'lead_id':ids[0],'user_id':user_id})
                
                self.all_products(cr,uid,ids,context)
#                template = mod_obj.get_object_reference(cr, uid, 'syml', 'email_template_referral_proposal_notify')
#                template_id = template and template[1] or False
#                if template_id:
#                    context.update({'proposal':ids[0],'user_id':uid})
#                    self.pool.get('email.template').send_mail(cr,uid,template_id,ids[0],'True',context)
                template2= mod_obj.get_object_reference(cr, uid, 'syml', 'email_template_client_proposal_notify')
                template_id2 = template2 and template2[1] or False
#                if template_id2:
#                    context.update({'proposal':ids[0],'user_id':uid})
#                    self.pool.get('email.template').send_mail(cr,uid,template_id2,ids[0],'True',context)
                create_date=datetime.datetime.strptime(crm_browse.create_date, tools.DEFAULT_SERVER_DATETIME_FORMAT)
                create_date=(create_date + datetime.timedelta(hours=3)).strftime('%Y-%m-%d %H:%M:%S')
                app_name,name='',''
                if crm_browse.app_rec_ids:
                    app_name=crm_browse.app_rec_ids[0].applicant_name
                name='Contact' + "  " + app_name + "  " + \
                'with a phone call before' + " " +str(create_date) +" " +\
                'to review the proposal together and answer questions / have product selected.'
                assig_to_ids=res_users_obj.search(cr,uid,[('designation','=','broker'),('hr_department_id','=',crm_browse.hr_department_id.id)])
                if assig_to_ids:
                    assig_to=assig_to_ids[0]
                project_task.create(cr, uid, {
                        #'name': '%s: Task for %s %s' % (cur_obj.name or '', cur_obj.name2 , cur_obj.name3),
                        'name': name  ,
                        'date_deadline': str(create_date) ,
                        'hr_department_id':crm_browse.hr_department_id.id,
                        'related_to':ids[0]  or False,
                        'user_id':assig_to,
                        'create_date':datetime.datetime.now(),
                        'state':'open',
                       
                        },context=context)
                user = self.pool.get('res.users').browse(cr ,uid ,uid)
                subject = ('''Task has been created''')
                details = ('''User "%s" has created the task''') % (user.name)

                self.message_post(cr, uid, ids, body=details, subject=subject, context=context)
            if stage_brw.name == 'Awaiting Docs':
                user=crm_browse.hr_department_id.id
                if user:
                    user_id=user
                assig_to_ids=''
                context.update({'lead_id':ids[0],'user_id':user_id})
                if crm_browse.referred_source.received_update==True and crm_browse.referred_source.role=='realtor':
                    template = mod_obj.get_object_reference(cr, uid, 'syml', 'email_template_related_docs')
                    template_id = template and template[1] or False
                    print"templatee1",template_id
 #                   if template_id:
    #                    context.update({'proposal':ids[0],'user_id':uid})
#                        self.pool.get('email.template').send_mail(cr,uid,template_id,ids[0],'True',context)
                cr.execute("select count(id) from product_product")
                prod_count = cr.fetchone()[0]
                date=(datetime.datetime.now()+ datetime.timedelta(days=3)).strftime('%Y-%m-%d %H:%M:%S')
                self.write(cr,uid,ids,{'prod_count':int(prod_count),'template_date':date},context)
#                template2 = mod_obj.get_object_reference(cr, uid, 'syml', 'email_template_document_requirement')
#                template_id2 = template2 and template2[1] or False
#                print"templatee2",template_id2
#                if template_id2:
#                    context.update({'app_completed':emails_cc})
##                    context.update({'proposal':ids[0],'user_id':uid})
#                    self.pool.get('email.template').send_mail(cr,uid,template_id2,ids[0],'True',context)
            if stage_brw.name == 'Completed App':
                context.update({'app_completed':''})

                #template = mod_obj.get_object_reference(cr, uid, 'syml', 'email_template_acknowledge_app_receieved')
                #template_id = template and template[1] or False
                #if template_id:
#                    context.update({'app_completed':emails_cc,'crm_id':crm_browse})
                    #context.update({'crm_id':crm_browse})
                    #self.pool.get('email.template').send_mail(cr,uid,template_id,ids[0],'True',context)

#                second mail
                #if crm_browse.referred_source.received_update==True:
                    #context.update({'app_completed':''})
                    #template2 = mod_obj.get_object_reference(cr, uid, 'syml', 'email_template_app_complete')
                    #template_id2 = template2 and template2[1] or False
                    #if template_id2:

                        #self.pool.get('email.template').send_mail(cr,uid,template_id2,ids[0],'True',context)

                if crm_browse.condition_of_financing_date:
                    app_name,app_email,comp_app_name='','',''
                    if crm_browse.app_rec_ids:
                        app_name=crm_browse.app_rec_ids[0].applicant_name
                        app_email=crm_browse.app_rec_ids[0].email_personal
                    comp_app_name=' Send Condition of Financing Letter before' + "  " + (crm_browse.condition_of_financing_date or '') + "  " + \
                    'to' + " " +app_name +  " " + 'at' + " " + app_email + " " + "and" + " " + ( crm_browse.referred_source and crm_browse.referred_source.partner_id and crm_browse.referred_source.partner_id.name  or '')+  " " + 'at' + " " + (crm_browse.referred_source and crm_browse.referred_source.email_from or '')  + " "+ \
                    'using the Condition of Financing Letter template.'
                    assig_to_ids=res_users_obj.search(cr,uid,[('designation','=','broker'),('hr_department_id','=',crm_browse.hr_department_id.id)])
                    if assig_to_ids:
                        assig_to=assig_to_ids[0]
                    project_task.create(cr, uid, {
                            #'name': '%s: Task for %s %s' % (cur_obj.name or '', cur_obj.name2 , cur_obj.name3),
                            'name': comp_app_name  ,
                            'date_deadline': crm_browse.condition_of_financing_date or False,
                            'hr_department_id':crm_browse.hr_department_id.id,
                            'related_to':ids[0]  or False,
                            'user_id': assig_to,
                            'create_date':datetime.datetime.now(),
                            'state':'open',

                            },context=context)
                new_opp_name=''
		
                new_opp_name='Review ' + crm_browse.name or  '' + 'as well as the list of applicants for completeness and change stage to Credit'
                create_date=datetime.datetime.now()
		
                deadline=(create_date + datetime.timedelta(hours=1)).strftime('%Y-%m-%d %H:%M:%S')
                assig_to_ids=res_users_obj.search(cr,uid,[('designation','=','assistant'),('hr_department_id','=',crm_browse.hr_department_id.id)])
                print"assig_to_ids",assig_to_ids
                if assig_to_ids:
                    assig_to=assig_to_ids[0]
                
                project_task.create(cr, uid, {
                        #'name': '%s: Task for %s %s' % (cur_obj.name or '', cur_obj.name2 , cur_obj.name3),
                        'name': new_opp_name  ,
                        'date_deadline': deadline or False ,
                        'hr_department_id':crm_browse.hr_department_id.id,
                        'related_to':ids[0]  or False,
                        'user_id': assig_to,
                        'create_date':datetime.datetime.now(),
                        'state':'open',

                        },context=context)
                template,template_id=False,False
                template = mod_obj.get_object_reference(cr, uid, 'syml', 'email_template_review_task')
                template_id = template and template[1] or False
                assig_to_email=res_users_obj.browse(cr,uid,assig_to).email
                dept_email=crm_browse.hr_department_id.mail_server.smtp_user
                if dept_email:
                    assig_to_email = assig_to_email + ',' +  dept_email
                print"assig_to_emailassig_to_emailassig_to_emailassig_to_emaillllllllllllllllllllll",assig_to_email
                
                context.update({'new_opp':assig_to_email})
#                if template_id:
#                    context.update({'proposal':ids[0],'user_id':uid})
#                    self.pool.get('email.template').send_mail(cr,uid,template_id,ids[0],'True',context)
            if stage_brw.name == 'Commitment':
                context.update({'new_opp':''})
                referred_source_name,app_name,lender_name='','',''
                assig_to_ids=res_users_obj.search(cr,uid,[('designation','=','assistant'),('hr_department_id','=',crm_browse.hr_department_id.id)])
                
                if assig_to_ids:
                    assig_to=assig_to_ids[0]
                create_date=datetime.datetime.now()
                deadline=(create_date + datetime.timedelta(hours=2)).strftime('%Y-%m-%d %H:%M:%S')
                if crm_browse.app_rec_ids:
                    app_name=crm_browse.app_rec_ids[0].applicant_name
                if len(crm_browse.app_rec_ids) >= 2:
                    app_name=app_name + ' '+ "and" + " " + crm_browse.app_rec_ids[1].applicant_name
                if crm_browse.referred_source:
                    referred_source_name= crm_browse.referred_source.partner_id.name
                if crm_browse.referred_source and crm_browse.referred_source.partner_id and crm_browse.referred_source.partner_id.ion of Financing Letter template.'
                    assig_to_ids=res_users_obj.search(cr,uid,[('designation','=','broker'),('hr_department_id','=',crm_browse.hr_department_id.id)])
                    if assig_to_ids:
                        assig_to=assig_to_ids[0]
                    project_task.create(cr, uid, {
                            #'name': '%s: Task for %s %s' % (cur_obj.name or '', cur_obj.name2 , cur_obj.name3),
                            'name': comp_app_name  ,
                            'date_deadline': crm_browse.condition_of_financing_date or False,
                            'hr_department_id':crm_browse.hr_department_id.id,
                            'related_to':ids[0]  or False,
                            'user_id': assig_to,
                            'create_date':datetime.datetime.now(),
                            'state':'open',

                            },context=context)
                new_opp_name=''
		
                new_opp_name='Review ' + crm_browse.name or  '' + 'as well as the list of applicants for completeness and change stage to Credit'
                create_date=datetime.datetime.now()
		
                deadline=(create_date + datetime.timedelta(hours=1)).strftime('%Y-%m-%d %H:%M:%S')
                assig_to_ids=res_users_obj.search(cr,uid,[('designation','=','assistant'),('hr_department_id','=',crm_browse.hr_department_id.id)])
                print"assig_to_ids",assig_to_ids
                if assig_to_ids:
                    assig_to=assig_to_ids[0]
                
                project_task.create(cr, uid, {
                        #'name': '%s: Task for %s %s' % (cur_obj.name or '', cur_obj.name2 , cur_obj.name3),
                        'name': new_opp_name  ,
                        'date_deadline': deadline or False ,
                        'hr_department_id':crm_browse.hr_department_id.id,
                        'related_to':ids[0]  or False,
                        'user_id': assig_to,
                        'create_date':datetime.datetime.now(),
                        'state':'open',

                        },context=context)
                template,template_id=False,False
                template = mod_obj.get_object_reference(cr, uid, 'syml', 'email_template_review_task')
                template_id = template and template[1] or False
                assig_to_email=res_users_obj.browse(cr,uid,assig_to).email
                dept_email=crm_browse.hr_department_id.mail_server.smtp_user
                if dept_email:
                    assig_to_email = assig_to_email + ',' +  dept_email
                print"assig_to_emailassig_to_emailassig_to_emailassig_to_emaillllllllllllllllllllll",assig_to_email
                
                context.update({'new_opp':assig_to_email})
#                if template_id:
#                    context.update({'proposal':ids[0],'user_id':uid})
#                    self.pool.get('email.template').send_mail(cr,uid,template_id,ids[0],'True',context)
            if stage_brw.name == 'Commitment':
                context.update({'new_opp':''})
                referred_source_name,app_name,lender_name='','',''
                assig_to_ids=res_users_obj.search(cr,uid,[('designation','=','assistant'),('hr_department_id','=',crm_browse.hr_department_id.id)])
                
                if assig_to_ids:
                    assig_to=assig_to_ids[0]
                create_date=datetime.datetime.now()
                deadline=(create_date + datetime.timedelta(hours=2)).strftime('%Y-%m-%d %H:%M:%S')
                if crm_browse.app_rec_ids:
                    app_name=crm_browse.app_rec_ids[0].applicant_name
                if len(crm_browse.app_rec_ids) >= 2:
                    app_name=app_name + ' '+ "and" + " " + crm_browse.app_rec_ids[1].applicant_name
                if crm_browse.referred_source:
                    referred_source_name= crm_browse.referred_source.partner_id.name
                if crm_browse.referred_source and crm_browse.referred_source.partner_id and crm_browse.referred_source.partner_id.